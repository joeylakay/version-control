#VERSION CONTROL

##How to Use Git and GitHub

####Course Overview
    - Lesson 1: Why version control? install git and read-only usage.
    - Lesson 2: read and write git
    - Lesson 3: share and collaborate

###LESSON 1###

####Differences between two files
    - automatically compare files...
    - mac/linux...built in tool: diff (stands for difference)
    - diff -u (u stands for unified diff format and makes the difference file easier to read)


####Version Control - Creating a Concept Map
    - Manually, Dropbox, Google Dox, SVN, CVS, Mercurial, Git
    - commit concept - part of git
    - View the history of file:
        - git log: lists every commit that file has had starting with most recent
    - git diff: compares differences in the same file (plus with color!)

####Commits and Tracking across multiple files
    - How often?  Make on commit per logical change
    - Don't group different changes in a single commit
    - groups of files called a repository
    - a snapshot of your entire repo at the time of commit
    - git log --stat (gives stats on each commit,
        which files were affected symbolized by +++=-----)
    - can git diff commits by ref commit id

####Clone a Repository
    - git clone - followeb by url
    - to get colored diffs command:  git config --global color.ui auto

####Git Errors and Warnings
    - Octopus is a strategy git uses to combine many different versions of code together.
    - HEAD is the commit I am currently on, detaching the HEAD means switching to a previous
    commit.

####Git Workspace
    - git diff originalfile newfile


###LESSON 2###

####Repositories
    -hidden files and dirs....dot files hide from users.  ls - a (will show hidden files)
    -Initializing a Repo:
    - Each Git repository is tied to a specific directory - the directory where you ran git init. Only files from that directory (and subdirectories inside that directory) will be contained in that repository, and you can have different repositories in different directories.
    - git init doesnt create a commit

####Staging Area
    - add files to staging area and then when ready to commit, git commit bundles all files into single commit
    - new concepts: git init git add git status staging area working directory
    -

####How to write a commit message
    - You can also specify a commit message via the command line by running git commit -m "Commit message"
    - Use the udacity git style guide for reference.
    - Message Structure:
        - type: subject
            - type (also use imperative Add, Change, etc.)
            - feat, fix, docs, style, refactor, test, chore
            -  (subject is optional and only used when a commit requires a bit of explanation and context. Use the body to explain the what and why of a commit, not the how)
        - footer (The footer is optional and is used to reference issue tracker IDs.)

####git diff revisited
    - to view differences btwn two commits in repo, use git diff id1 id2
    - to view differences btwn working dir and staging area, use git diff
    - to view diffs btwn staging area and repo, use git diff --staged
    - git reset --hard resets changes to both working dir and staging area (but be careful...cant get changes back!).
    -

####Branching
    -labels for commits (main branch usually called master branch )
    - current last commit of a branch is called the tip
    - combining two commits is a merge.

####Making a Branch
    - git branch command to create and view branches
    - git branch (no arguments) view all branches
    - git branch branchname (create new branch with that arguement as name)
    - but this will not checkout the new branch....so I then need to do git checkout branchname
####Branching for Collaboration
    -to help visualize commits on a branch: git log --graph --oneline branch branch
    - git commit has a parent and only knows where it came from, not about other branches.
    - git log traces back to a commit that doesn't have a parent.
    - git checkout -b new_branch_name

####Combining Simple Files
    -git show....will diff a file to it's parent
    -git merge master coins to merge those branches
    -
####Merge Conficts
    -might have to review this section
    -
    -

####Staging area pattern
    -try staging the thing I definitely want to commit and then can keep working on the file and incorporate 2nd changes if relevant.
    -
    -

####LESSON 3: Using Github
    -syncing repos:  create an empty repo
    - remote repos (remotes) can push and pull data specify branch
    -push master...

####Editing Files on GitHub
    -
    -
    -
####Forking a repo on Github
    - git clone into your own account remote repo on github (forking)
    - then pull down code on your own machine with git clone from your fork
    - then links back to original repo you forked from
    - branches happen on a single repo
    - clone involves taking an existing repo and making one just like it somewhere else.
    -

####Conflicting Collaboration
    - merge local and remote branches
    - merging remote changes - local copies of remote branches
    - git fetch to get a local copy of the changed origin without losing your changes to your version of the master.  Basically makes a new branch.
####Merging Remote Changes
    -git fetch origin /  git branch -a / git diff origin/master master
    -
    -

#### Local Copies of Remote Branches Solution
    -git merge localmaster origin/master
    - git will report a conflict which I must manually resolve by editing chili file.
    -After resolving conflict, I need to git add chili-recipe.txr and then git commit.

####
    -
    -
    -

####
    -
    -
    -
####
    -
    -
    -

####
    -
    -
    -
####
    -
    -
    -

####
    -
    -
    -